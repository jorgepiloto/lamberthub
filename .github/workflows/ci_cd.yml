name: CI/CD
on:
  pull_request:
    branches:
      - main
  push:
    tags:
      - "*"
    branches:
      - main
  repository_dispatch:

env:
  MAIN_PYTHON_VERSION : '3.10'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:

  label-syncer:
    name: Generate labels
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: micnncim/action-label-syncer@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  labeler:
    name: Label pull-request
    needs: [label-syncer]
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:

    - name: Label based on changed files
      uses: actions/labeler@v4
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        sync-labels: ''

    - uses: actions-ecosystem/action-add-labels@v1
      if: |
        startsWith(github.event.pull_request.head.ref, 'doc') || 
        startsWith(github.event.pull_request.head.ref, 'docs')
      with:
        labels: documentation

    - uses: actions-ecosystem/action-add-labels@v1
      if: |
        startsWith(github.event.pull_request.head.ref, 'maint') ||
        startsWith(github.event.pull_request.head.ref, 'no-ci') ||
        startsWith(github.event.pull_request.head.ref, 'ci')
      with:
        labels: maintenance

    - uses: actions-ecosystem/action-add-labels@v1
      if: startsWith(github.event.pull_request.head.ref, 'feat')
      with:
        labels: |
          enhancement
    - uses: actions-ecosystem/action-add-labels@v1
      if: |
        startsWith(github.event.pull_request.head.ref, 'fix') ||
        startsWith(github.event.pull_request.head.ref, 'patch')
      with:
        labels: bug

  style:
    name: Code Style
    needs: [labeler]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip tox
      - name: Run style checks
        run: tox -e style

  docs-style:
    needs: [labeler]
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Running Vale
        uses: errata-ai/vale-action@reviewdog
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          files: doc
          reporter: github-pr-check
          level: error
          filter_mode: nofilter
          fail_on_error: true
          vale_flags: "--config=doc/.vale.ini"

  tests:
    name: Tests
    runs-on: ${{ matrix.os }}
    needs: [style]
    strategy:
      matrix:
        os: [ubuntu-latest]
        cfg:
          - {python-version: "3.7", toxenv: "py37"}
          - {python-version: "3.8", toxenv: "py38"}
          - {python-version: "3.9", toxenv: "py39"}
          - {python-version: "3.10", toxenv: "py310-cov"}
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.cfg.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.cfg.python-version }}

      - name: Install dependencies
        run: python -m pip install --upgrade pip tox

      - name: Run Tox
        run: tox -e ${{ matrix.cfg.toxenv }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        if: matrix.cfg.python-version == ${{ env.MAIN_PYTHON_VERSION }} && matrix.os == 'ubuntu-latest'

  docs:
    name: Docs
    runs-on: ubuntu-latest
    needs: [docs-style]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt-get install pandoc texlive
          python -m pip install --upgrade pip tox

      - name: Generate the documentation with tox
        run: tox -e doc

      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v2
        with:
          name: HTML-Documentation
          path: .tox/doc_out

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [tests, docs]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements/requirements_build.txt

      - name: Build wheel and sdist
        run: |
          python -m build && python -m twine check dist/*

      - name: Upload wheel and sdist to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: lamberthub
          path: dist/
          retention-days: 7

  release:
    name: Release
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [build]
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout repository
        uses: actions/download-artifact@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Display structure of downloaded files
        run: ls -R

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements/requirements_build.txt

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m twine upload --skip-existing ./**/*.whl
          python -m twine upload --skip-existing ./**/*.tar.gz

      - name: Publish to GitHub
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.tar.gz

      - name: Deploy stable documentation
        run: |
          curl -XPOST -u "${{ secrets.USERNAME }}:${{ secrets.PAT_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Content-Type: application/json" https://api.github.com/repos/jorgepiloto/jorgepiloto.github.io/actions/workflows/publish.yml/dispatches \
          --data '{"ref": "main"}' \
          --fail
