name: CI/CD
on:
  pull_request:
    branches:
      - main
  push:
    tags:
      - "*"
    branches:
      - main
  repository_dispatch:

env:
  MAIN_PYTHON_VERSION : '3.10'
  LIBRARY_NAME: 'lamberthub'
  DOCUMENTATION_CNAME: 'lamberthub.docs.jorgemartinez.space'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:

  label-syncer:
    name: Generate labels
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: micnncim/action-label-syncer@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  labeler:
    name: Label pull-request
    needs: [label-syncer]
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:

    - name: Label based on changed files
      uses: actions/labeler@v4
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        sync-labels: ''

    - uses: actions-ecosystem/action-add-labels@v1
      if: |
        startsWith(github.event.pull_request.head.ref, 'doc') || 
        startsWith(github.event.pull_request.head.ref, 'docs')
      with:
        labels: documentation

    - uses: actions-ecosystem/action-add-labels@v1
      if: |
        startsWith(github.event.pull_request.head.ref, 'maint') ||
        startsWith(github.event.pull_request.head.ref, 'no-ci') ||
        startsWith(github.event.pull_request.head.ref, 'ci')
      with:
        labels: maintenance

    - uses: actions-ecosystem/action-add-labels@v1
      if: startsWith(github.event.pull_request.head.ref, 'feat')
      with:
        labels: |
          enhancement
    - uses: actions-ecosystem/action-add-labels@v1
      if: |
        startsWith(github.event.pull_request.head.ref, 'fix') ||
        startsWith(github.event.pull_request.head.ref, 'patch')
      with:
        labels: bug

  code-style:
    name: "Code style"
    needs: [labeler]
    runs-on: ubuntu-latest
    steps:
      - uses: pyansys/actions/code-style@v2
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    needs: [labeler]
    name: "Documentation style"
    runs-on: ubuntu-latest
    steps:
      - uses: pyansys/actions/doc-style@v2
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: "Documentation build"
    runs-on: ubuntu-latest
    needs: doc-style
    steps:
      - name: "Run Ansys documentation building action"
        uses: pyansys/actions/doc-build@v2

  doc-deploy-development:
    name: "Deploy development documentation"
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: doc-build
    steps:
      - name: "Deploy developers documentation"
        uses: pyansys/actions/doc-deploy-dev@v2
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}

  doc-deploy-stable:
    name: "Deploy stable documentation"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: doc-deploy-development
    steps:
      - name: "Deploy stable documentation"
        uses: pyansys/actions/doc-deploy-stable@v2
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }} 
  tests:
    name: "Tests and coverage"
    runs-on: ${{ matrix.os }}
    strategy:
       matrix:
           os: [ubuntu-latest, windows-latest]
           python-version: ['3.7', '3.8', '3.9', '3.10']
       fail-fast: false
    steps:
      - name: "Run pytest"
        uses: pyansys/actions/tests-pytest@v2
        with:
          pytest-extra-args: "--cov=${{ env.LIBRARY_NAME }} --cov-report=term --cov-report=html:.cov/html"
  
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v2
        if: matrix.cfg.python-version == ${{ env.MAIN_PYTHON_VERSION }} && matrix.os == 'ubuntu-latest'

  build-library:
    name: "Build wheels and source artifacts"
    runs-on: ubuntu-latest
    needs: [doc-deploy-stable, tests]
    steps:
      - name: "Build library source and wheel artifacts"
        uses: pyansys/actions/build-library@v2
        with:
          library-name: ${{ env.LIBRARY_NAME }}

  release:
    name: "Release to public PyPI"
    runs-on: ubuntu-latest
    needs: [build-library]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:

      - name: "Release to the public PyPI repository"
        uses: pyansys/actions/release-pypi-public@v2
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}

      - name: "Release to GitHub"
        uses: pyansys/actions/release-github@v2
        with:
          library-name: ${{ env.LIBRARY_NAME }}
